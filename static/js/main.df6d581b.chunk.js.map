{"version":3,"sources":["util/api.js","components/results.tsx","components/controls.tsx","components/titlebar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["searchWords","pageNumber","console","log","query","contentPath","toString","axios","get","ResultContainer","children","CardColumns","ResultCard","props","Card","className","id","style","position","top","bottom","height","width","href","link","target","rel","Img","variant","maxWidth","minWidth","src","thumbnail","alt","Body","Subtitle","date","Title","title","Text","summary","ControlBar","page","lastPage","goBack","goNext","handleInput","handleSearch","Navbar","bg","expand","Nav","Pagination","Prev","disabled","onClick","Next","Form","inline","onSubmit","Control","as","type","placeholder","onChange","Button","TitleBar","Jumbotron","App","useState","loading","setLoading","newsResults","setNewsResults","searchEntry","setSearchEntry","fetchNewsContent","API","then","res","newResults","itemArray","results","map","result","Date","webPublicationDate","toDateString","webTitle","fields","trailText","webUrl","currentPage","totalPages","pages","processNewsResults","data","response","catch","err","code","useEffect","handlePageChange","goTo","newPage","event","preventDefault","value","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df6d581b.chunk.js","sourcesContent":["/** @format */\n//global\nimport axios from \"axios\";\n\n// js file needs update to tsx\nexport default {\n\tguardianContent: (searchWords, pageNumber) => {\n\t\tconsole.log(\"search: \", searchWords);\n\t\tconsole.log(\"page: \", pageNumber);\n\t\tconst contentPath = \"https://content.guardianapis.com/search?\";\n\t\tconst specialRequests = \"show-fields=thumbnail,trailText&\";\n\t\t// env is used to make api key less visible but it is still not secure\n\t\t// preferred approach would be to make the call from the server rather than the client\n\t\tconst permission = \"api-key=\" + process.env.REACT_APP_API_KEY;\n\t\tconst numResults = \"page-size=12&\";\n\t\tconst search = searchWords ? \"q=\" + searchWords + \"&\" : \"\";\n\t\tconst page = pageNumber !== 1 ? \"page=\" + pageNumber.toString() + \"&\" : \"\";\n\n\t\tconst query = contentPath + specialRequests + numResults + search + page + permission;\n\t\tconsole.log(\"query: \", query);\n\t\treturn axios.get(query);\n\t},\n};\n","/** @format */\n\n// Global\nimport { FC } from \"react\";\nimport CardColumns from \"react-bootstrap/CardColumns\";\nimport Card from \"react-bootstrap/Card\";\n\n// Local\nimport { NewsItem } from \"../App\";\n\nexport const ResultContainer: FC = ({ children }): JSX.Element => {\n\treturn <CardColumns>{children}</CardColumns>;\n};\n\nexport const ResultCard = (props: NewsItem) => {\n\treturn (\n\t\t// with more time I would wrap the card with the anchor so the anchor would have content\n\t\t// this would require re-styling all text to override standard link properties\n\t\t<Card className=\"mt-3\" id={props.id}>\n\t\t\t<a\n\t\t\t\tstyle={{ position: \"absolute\", top: 0, bottom: 0, height: \"100%\", width: \"100%\" }}\n\t\t\t\thref={props.link}\n\t\t\t\ttarget=\"_blank\"\n\t\t\t\trel=\"noreferrer\"\n\t\t\t/>\n\t\t\t<Card.Img\n\t\t\t\tvariant=\"top\"\n\t\t\t\tstyle={{ height: \"auto\", maxWidth: \"400px\", minWidth: \"300px\" }}\n\t\t\t\tsrc={props.thumbnail}\n\t\t\t\talt=\"Article Thumbnail\"\n\t\t\t/>\n\t\t\t<Card.Body>\n\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">{props.date}</Card.Subtitle>\n\t\t\t\t<Card.Title>{props.title}</Card.Title>\n\t\t\t\t<Card.Text>{props.summary}</Card.Text>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n","/** @format */\n\n// Global\nimport React, { ChangeEvent, FormEvent } from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Pagination from \"react-bootstrap/Pagination\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\ninterface controlProps {\n\tpage: number;\n\tlastPage: number;\n\tgoBack: () => void;\n\tgoNext: () => void;\n\thandleInput: (event: ChangeEvent<HTMLInputElement>) => void;\n\thandleSearch: (event: FormEvent) => void;\n}\n\nexport const ControlBar = ({\n\tpage,\n\tlastPage,\n\tgoBack,\n\tgoNext,\n\thandleInput,\n\thandleSearch,\n}: controlProps) => {\n\treturn (\n\t\t// ux consderations - not optimized for mobile, need page controls at bottom of feed or implement bottomless scroll\n\t\t// bug - styling overrides needed to prevent search box from \"bouncing\" when clicked\n\t\t<Navbar bg=\"light\" expand=\"lg\">\n\t\t\t<Nav className=\"mr-auto\">\n\t\t\t\t<Pagination className=\"my-0\">\n\t\t\t\t\t<Pagination.Prev disabled={page <= 1} onClick={goBack} />\n\t\t\t\t\t<Pagination.Next disabled={lastPage === page} onClick={goNext} />\n\t\t\t\t</Pagination>\n\t\t\t</Nav>\n\t\t\t<Form inline onSubmit={handleSearch}>\n\t\t\t\t<Form.Control\n\t\t\t\t\tas=\"input\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Search\"\n\t\t\t\t\tclassName=\"mr-sm-2\"\n\t\t\t\t\tonChange={handleInput}\n\t\t\t\t/>\n\t\t\t\t<Button variant=\"outline-success\" type=\"submit\">\n\t\t\t\t\tSearch\n\t\t\t\t</Button>\n\t\t\t</Form>\n\t\t</Navbar>\n\t);\n};\n","/** @format */\n\n// Global\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\n\nconst TitleBar = () => {\n\treturn (\n\t\t<Jumbotron className=\"py-3\">\n\t\t\t<h1 className=\"text-center\">Feed Me the News</h1>\n\t\t\t<h4 className=\"text-center\">Content from The Guardian</h4>\n\t\t</Jumbotron>\n\t);\n};\nexport default TitleBar;\n","/** @format */\n\n//global\nimport React, { useState, useEffect, ChangeEvent, FormEvent } from \"react\";\n\n//local\nimport \"./App.css\";\nimport API from \"./util/api\";\nimport { ResultContainer, ResultCard } from \"./components/results\";\nimport { ControlBar } from \"./components/controls\";\nimport TitleBar from \"./components/titlebar\";\n\n// custom types\nexport interface NewsItem {\n\tid: string;\n\tdate: string;\n\ttitle: string;\n\tsummary: string;\n\tthumbnail: string;\n\tlink: string;\n}\n\ninterface NewsFeed {\n\tpage: number;\n\ttotalPages: number;\n\tresults: NewsItem[];\n}\n\n// helper functions\n// to meet time constraints for this exercise I am not creating a type for the full api response and instead using any\nconst processNewsResults = (res: any): NewsFeed => {\n\tlet itemArray: NewsItem[] = res.results.map((result: any) => {\n\t\tlet item: NewsItem = {\n\t\t\tid: result.id,\n\t\t\tdate: new Date(result.webPublicationDate).toDateString(),\n\t\t\ttitle: result.webTitle,\n\t\t\tsummary: result.fields.trailText,\n\t\t\tthumbnail: result.fields.thumbnail,\n\t\t\tlink: result.webUrl,\n\t\t};\n\t\treturn item;\n\t});\n\treturn { page: res.currentPage, totalPages: res.pages, results: itemArray };\n};\n\nfunction App() {\n\tconst [loading, setLoading] = useState<boolean>(true);\n\tconst [newsResults, setNewsResults] = useState<NewsFeed>();\n\tconst [searchEntry, setSearchEntry] = useState<string>(\"\");\n\n\tconst fetchNewsContent = (page: number) => {\n\t\tsetLoading(true);\n\t\tAPI.guardianContent(searchEntry, page)\n\t\t\t.then((res) => {\n\t\t\t\tlet newResults: NewsFeed = processNewsResults(res.data.response);\n\t\t\t\tsetNewsResults(newResults);\n\t\t\t\tsetLoading(false);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(\"error: \", err.code);\n\t\t\t\t// for now, api errors are all handled by setting loading as complete and not setting results\n\t\t\t\t// eventually differnt errors could be handled more specifically with an error state\n\t\t\t\tsetLoading(false);\n\t\t\t});\n\t};\n\n\t// get first page of content on page load (default per api so no page parameter needed)\n\t// this throws warning but it is correct implementation per docs for running only at load and not for rerenders\n\t// there is much debate on this issue and no agreed \"right\" answer so I am choosing to ignore the warning\n\tuseEffect(() => {\n\t\tfetchNewsContent(1);\n\t}, []);\n\n\tconst handlePageChange = (goTo: -1 | 1): void => {\n\t\tlet newPage: number = newsResults!.page + goTo;\n\t\t// conditions kept to avoid actions on multi-click of button before disable is registered\n\t\tif (newPage >= 1 && newPage <= newsResults!.totalPages) {\n\t\t\tfetchNewsContent(newPage);\n\t\t}\n\t};\n\n\tconst handleInput = (event: ChangeEvent<HTMLInputElement>): void => {\n\t\tevent.preventDefault();\n\t\tsetSearchEntry(event.target.value);\n\t};\n\n\tconst handleSearch = (event: FormEvent) => {\n\t\tevent.preventDefault();\n\t\tfetchNewsContent(1);\n\t};\n\n\tuseEffect(() => {\n\t\tconsole.log(\"news state: \", newsResults);\n\t}, [newsResults]);\n\n\treturn (\n\t\t// ui - styled messages component should be created for loading and errors\n\t\t<>\n\t\t\t<header>\n\t\t\t\t<TitleBar />\n\t\t\t</header>\n\t\t\t<main className=\"container-lg\">\n\t\t\t\t<ControlBar\n\t\t\t\t\tpage={newsResults ? newsResults.page : 0}\n\t\t\t\t\tlastPage={newsResults ? newsResults.totalPages : 0}\n\t\t\t\t\tgoBack={() => handlePageChange(-1)}\n\t\t\t\t\tgoNext={() => handlePageChange(1)}\n\t\t\t\t\thandleInput={handleInput}\n\t\t\t\t\thandleSearch={handleSearch}\n\t\t\t\t/>\n\t\t\t\t{loading ? (\n\t\t\t\t\t\"Please wait while we load your results...\"\n\t\t\t\t) : !newsResults ? (\n\t\t\t\t\t\"We are sorry. Something has gone wrong. Please try your search again later.\"\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<ResultContainer>\n\t\t\t\t\t\t\t{newsResults.results.length\n\t\t\t\t\t\t\t\t? newsResults.results.map((result: NewsItem) => {\n\t\t\t\t\t\t\t\t\t\treturn <ResultCard key={result.id} {...result} />;\n\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t: \"No results match your search criteria. Please try a different search.\"}\n\t\t\t\t\t\t</ResultContainer>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</main>\n\t\t</>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/** @format */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}